/*
 * Copyright (c) 2024, 2025, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

#pragma once

#include "D3D12Common.hpp"

#include "Internal/D3D12DescriptorData.hpp"
#include "Internal/D3D12RingBuffer.hpp"
#include "Internal/D3D12Shader.hpp"
#include "Internal/D3D12TextureBase.hpp"

#include <string>
#include <vector>
#include <map>


namespace D3D12 {

/**
 * NativeShader builds on top of base Shader class to provide functionality
 * specifically for shaders generated by JSLC. For internal shaders used by
 * the backend (PassthroughVS for 2D, Phong Shaders for 3D) see InternalShader.
 */
class NativeShader: public Internal::Shader
{
private:
    JSLC::ShaderResourceCollection mShaderResources;

    uint32_t GetTotalBindingSize(const JSLC::ResourceBinding& binding) const;

    public:
    NativeShader();
    ~NativeShader();

    bool Init(const std::string& name, void* code, size_t size);

    virtual bool PrepareDescriptors(const Internal::TextureBank& textures) override;
    virtual void ApplyDescriptors(const D3D12GraphicsCommandListPtr& commandList) const override;
};

} // namespace D3D12
