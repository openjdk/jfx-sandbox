/*
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

#pragma once

#include "D3D12Common.hpp"

#include "Internal/D3D12DescriptorData.hpp"
#include "Internal/D3D12RingBuffer.hpp"
#include "Internal/D3D12Shader.hpp"

#include <string>
#include <vector>
#include <map>


namespace D3D12 {

/**
 * NativeShader builds on top of base Shader class to provide functionality
 * specifically for shaders generated by JSLC. For internal shaders used by
 * the backend (PassthroughVS for 2D, Phong Shaders for 3D) see InternalShader.
 */
class NativeShader: public Internal::Shader
{
private:
    // Root Signatures have slots which describe how Shaders access resources.
    // These can be used for root constants, descriptors or descriptor
    // tables. Some restrictions do apply to how those slots are used:
    //   - Each respective slot type increases in access latency
    //   - Texture SRVs must always be accessed via a descriptor table
    //   - A Root Signature can have at most 64 32-bit slots
    static const uint32_t MAX_AVAILABLE_SLOTS = 64;
    // root descriptors are GPU virtual addresses, so they take 64 bits (2 slots)
    static const uint32_t ROOT_DESCRIPTOR_SLOT_SIZE = 2;
    // descriptor tables take one 32bit slot
    static const uint32_t DESCRIPTOR_TABLE_SLOT_SIZE = 1;

    NIPtr<NativeDevice> mNativeDevice;
    D3D12RootSignaturePtr mRootSignature;
    JSLC::ShaderResourceCollection mShaderResources;
    uint32_t mTextureDTableIndex;
    uint32_t mCBufferDescriptorIndex;
    uint32_t mTextureCount;
    Internal::RingBuffer::Region mLastAllocatedCBufferRegion;
    Internal::DescriptorData mLastAllocatedDescriptorData;

    uint32_t GetTotalBindingSize(const JSLC::ResourceBinding& binding) const;
    bool RequiresTexturesDTable(const JSLC::ShaderResourceCollection& resources) const;
    bool ShouldCBufferHaveDescriptor(const JSLC::ShaderResourceCollection& resources, bool hasTextures) const;

    inline bool IsCBufferDataViaDescriptor() const
    {
        return mCBufferDescriptorIndex > 0;
    }

public:
    NativeShader(const NIPtr<NativeDevice>& nativeDevice);
    ~NativeShader();

    bool Init(const std::string& name, void* code, size_t size);

    virtual void PrepareShaderResources(const DataAllocator& dataAllocator, const DescriptorAllocator& descriptorAllocator, const CBVCreator& cbvCreator) override;
    virtual void ApplyShaderResources(const D3D12GraphicsCommandListPtr& commandList) const override;
    virtual const Internal::DescriptorData& GetTextureDescriptorTable() const override;

    inline const D3D12RootSignaturePtr& GetRootSignature() const
    {
        return mRootSignature;
    }
};

} // namespace D3D12
